{"componentChunkName":"component---src-templates-post-jsx","path":"/FixMemoryLeak/","result":{"data":{"site":{"siteMetadata":{"title":"Cho's Blog"}},"markdownRemark":{"id":"1fd88818-59e2-54c7-8b0b-f2f9c9bf7480","excerpt":"개인 프로젝트 개발중, 분명 메모리 해제가 되어야 하는 객체가 중첩돼서 메모리를 잡아먹는 현상이 발생하였다.\n이런 현상을 메모리 릭(Memory Leak) 이라고 하는데, 어떻게 메모리 릭이 일어났는지 확인하고 해결하였는지에 대한 과정을 기록해 볼까 한다. 메모리 릭 찾기 처음 메모리 릭이 생겼다는걸 발견한건 Rxswift를 사용하여 구독한 Observa…","html":"<p>개인 프로젝트 개발중, 분명 메모리 해제가 되어야 하는 객체가 중첩돼서 메모리를 잡아먹는 현상이 발생하였다.\n이런 현상을 <strong>메모리 릭(Memory Leak)</strong> 이라고 하는데, 어떻게 메모리 릭이 일어났는지 확인하고 해결하였는지에 대한 과정을 기록해 볼까 한다.</p>\n<h3 id=\"메모리-릭-찾기\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%A6%AD-%EC%B0%BE%EA%B8%B0\" aria-label=\"메모리 릭 찾기 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>메모리 릭 찾기</h3>\n<p>처음 메모리 릭이 생겼다는걸 발견한건 Rxswift를 사용하여 구독한 Observable이 화면이 사라졌음에도 불구하고 dispose가 되지 않는 것을 확인했을 때이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token class-name\">NotificationCenter</span><span class=\"token punctuation\">.</span>keyboardHightObservable\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token short-argument\">$0</span> <span class=\"token operator\">==</span> <span class=\"token number\">0.0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>onNext<span class=\"token punctuation\">:</span> setNextButtonPosition<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">disposed</span><span class=\"token punctuation\">(</span>by<span class=\"token punctuation\">:</span> disposeBag<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// setNextButtonPosition 함수</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">setNextButtonPosition</span><span class=\"token punctuation\">(</span>keyboardHeight<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>keyboardHeight<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 다른 코드들...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 코드에서 <code class=\"language-text\">NotificationCenter.keyboardHightObservable</code>은 키보드가 보이고 사라질 때, 키보드의 높이를 이벤트로 방출하는 Observable이고, 그 Observable을 구독하여 <code class=\"language-text\">setNextButtonPosition(:_)</code>이라는 함수를 실행시키는 코드이다.</p>\n<p><code class=\"language-text\">setNextButtonPosition(:_)</code>는 <code class=\"language-text\">keyboardHeight</code>를 받아 print를 하는데, 해당 출력이 화면을 보여줄때마다 중첩해서 출력되는 현상이 발생하였다.</p>\n<p><img src=\"/blog/static/flow-memory-leak-v1-859669192e177fb769f799089f8d03f3.gif\" alt=\"메모리 릭이 발상하는 모습\"></p>\n<p>좀더 확실하게 확인하기 위해 Xcode의 성능 분석 도구를 사용해 보았다.\n<strong>Product > Profile</strong> 또는 <strong>Command + i</strong> 를 사용하여 프로파일 도구를 실행시키고, <strong>Leaks</strong> 항목을 선택한다.</p>\n<p>그 다음 화면의 <strong>오른쪽 위 빨간색 재생 버튼</strong>같이 생긴걸 누르면, 앱이 실행되면서 검사를 시작하게 된다.\n<img src=\"/blog/static/flow-memory-leak-test-873c0978239b27ba995eacec915fd5f2.gif\" alt=\"메모리 릭 테스트\">\n검사중인 화면에서 <strong>Leaks</strong> 라는 부분을 보면 메모리 릭이 있는지 체크표시로 표시해 준다. 예상대로 특정 화면을 열고 닫는 과정 중 메모리 릭이 일어나 표시해 주는 것을 확인할 수 있다.</p>\n<h2 id=\"해결하기\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0\" aria-label=\"해결하기 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>해결하기</h2>\n<p>메모리 릭이 일어나는 이유는 아래와 같이 여러 요인들이 있다.</p>\n<ul>\n<li>순환 참조</li>\n<li>강한 참조</li>\n<li>뷰 컨트롤러의 라이프 사이클 관리 실수</li>\n<li>클로저에서의 강한 참조</li>\n</ul>\n<p>저 많은 요인들중 가장 의심가는 문제는 <code class=\"language-text\">.subscribe(onNext:_)</code>의 클로저에서 <code class=\"language-text\">setNextButtonPosition</code> 을 강한 참조로 실행시킨 부분이다. 사실 이 부분은 RxSwift를 사용하면서 가장 흔하게 생기는 문제인데, <code class=\"language-text\">.subscribe(onNext: setNextButtonPosition)</code>형식으로 바로 사용하면 문제가 생기지 않을거라고 생각한 내 실수였다.</p>\n<p>해당 문제를 해결하는 방법은 간단하게 강한 참조를 weak self를 사용하여 약한 참조로 바꾸는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token class-name\">NotificationCenter</span><span class=\"token punctuation\">.</span>keyboardHightObservable\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token short-argument\">$0</span> <span class=\"token operator\">==</span> <span class=\"token number\">0.0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>onNext<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">weak</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span>\n\t\t<span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> <span class=\"token keyword\">self</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">setNextButtonPosition</span><span class=\"token punctuation\">(</span>keyboardHeight<span class=\"token punctuation\">:</span> <span class=\"token short-argument\">$0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">disposed</span><span class=\"token punctuation\">(</span>by<span class=\"token punctuation\">:</span> disposeBag<span class=\"token punctuation\">)</span></code></pre></div>\n<p>마지막으로 성능도구 확인까지 해보자\n<img src=\"/blog/static/flow-memory-leak-last-025a2a1a4cfc3b67a80f1b30382040cb.gif\" alt=\"해결된 메모리 릭\"></p>","frontmatter":{"title":"메모리 릭 잡고 성능 최적화하기","date":"March 27, 2025","update":"March 27, 2025","tags":["메모리 릭","iOS"],"series":"iOS"},"fields":{"slug":"/FixMemoryLeak/","readingTime":{"minutes":3.635}}},"seriesList":{"edges":[{"node":{"id":"e610c2bc-9982-5295-be29-03c5c52264ed","fields":{"slug":"/UIColorAndCGColor/"},"frontmatter":{"title":"UIColor과 CGColor은 뭐가 다른걸까"}}},{"node":{"id":"1fd88818-59e2-54c7-8b0b-f2f9c9bf7480","fields":{"slug":"/FixMemoryLeak/"},"frontmatter":{"title":"메모리 릭 잡고 성능 최적화하기"}}},{"node":{"id":"7f148eea-f335-51f6-8487-d0158dcb8e30","fields":{"slug":"/TrimString/"},"frontmatter":{"title":"Swift에서 문자열 예쁘게 만들기"}}}]},"previous":{"fields":{"slug":"/UIColorAndCGColor/"},"frontmatter":{"title":"UIColor과 CGColor은 뭐가 다른걸까"}},"next":{"fields":{"slug":"/TrimString/"},"frontmatter":{"title":"Swift에서 문자열 예쁘게 만들기"}}},"pageContext":{"id":"1fd88818-59e2-54c7-8b0b-f2f9c9bf7480","series":"iOS","previousPostId":"e610c2bc-9982-5295-be29-03c5c52264ed","nextPostId":"7f148eea-f335-51f6-8487-d0158dcb8e30"}},"staticQueryHashes":[],"slicesMap":{}}